unit_id,unit_title,lesson_id,lesson_title,lesson_activity,lesson_activity_name,lesson_notes,lesson_video_id,lesson_objectives
1,Introduction to transistors,1,Transistors Overview,yes,Transistor Basics,https://docs.google.com/presentation/d/1YuVJqq6kR34ryHLQ57Ir2nNfc6wok4rw6FgFum4BrkY/edit?usp=sharing,RB2e1iYBDmc,<ul><li>We'll use a transistor like an electrically controlled light switch</li><li>Transistors come in two types<ul><li>Current controlled devices called BJTs</li><li>Voltage controlled devices called MOSFETs</li></ul></li></ul>
1,Introduction to transistors,2,BJTs,yes,BJT Questions,https://docs.google.com/presentation/d/1YuVJqq6kR34ryHLQ57Ir2nNfc6wok4rw6FgFum4BrkY/edit?usp=sharing,vwVfdknA8UE,<ul><li>BJTs use current to turn on and off<ul><li>1/10th of the collector current to turn on</li><li>0 mA to turn off</li></ul></li></ul>
1,Introduction to transistors,3,MOSFETs,yes,MOSFET Questions,https://docs.google.com/presentation/d/1YuVJqq6kR34ryHLQ57Ir2nNfc6wok4rw6FgFum4BrkY/edit?usp=sharing,QU5sPD0B4UU,<ul><li>MOSFETs use voltage to turn on and off<ul><li>5 volts to turn on</li><li>0 volts to turn off</li></ul></li></ul>
1,Introduction to transistors,4,Other Packages,yes,Darlington Questions,https://docs.google.com/presentation/d/1YuVJqq6kR34ryHLQ57Ir2nNfc6wok4rw6FgFum4BrkY/edit?usp=sharing,6S1szCzKWEk,<ul><li>Darlingtons (ULN2003) are a handy 7 transistor chip</li><li>H-Bridge circuits (L293 or 754410) are handy low power dual h-bridge chips</li><li>Relays are a nice mechanical solution instead of transistors</li></ul>
2,"Snubber diodes, decoupling capacitors, and H-bridge circuits",1,Snubber Diodes,yes,Snubber Questions,https://docs.google.com/presentation/d/1UTSIhNWB86RfTgqgJryL9jzhCGt60uRHRHOBZs4a4HM/edit?usp=sharing,qA0gwXVXYLE,<ul><li>Snubber diodes provide a safe path for inductive kick when turning a motor off</li></ul>
2,"Snubber diodes, decoupling capacitors, and H-bridge circuits",2,Decoupling Capacitors,yes,Decoupling capacitor Questions,https://docs.google.com/presentation/d/1UTSIhNWB86RfTgqgJryL9jzhCGt60uRHRHOBZs4a4HM/edit?usp=sharing,cT5-2HKdTJA,<ul><li>Decoupling capacitors help filter noise out of the power rail to protect control chips from high power components</li></ul>
2,"Snubber diodes, decoupling capacitors, and H-bridge circuits",3,H-Bridge Circuits,yes,H-Bridge Questions,https://docs.google.com/presentation/d/1UTSIhNWB86RfTgqgJryL9jzhCGt60uRHRHOBZs4a4HM/edit?usp=sharing,hK5hK6ZHvP8,<ul><li>Vcc1 to regulated 5 volts</li><li>Vcc2 to unregulated motor power</li><li>Pull up an enable line using a 1k resistor to regulated 5 volts</li><li>Four snubber diodes per motor</li><li>Don't forget the decoupling capacitor on Vcc2</li></ul>
2,"Snubber diodes, decoupling capacitors, and H-bridge circuits",4,Practice Problem,,,https://docs.google.com/presentation/d/1UTSIhNWB86RfTgqgJryL9jzhCGt60uRHRHOBZs4a4HM/edit?usp=sharing,taLwot8W9VE,<ul><li>Practice problem from an old exam (we always ask something like this on exam one)</li><li><h2 style='color: blue;'>Don't worry if some of the PIC stuff is new.  Just go with it. Exam 1 isn't for awhile. :)  You'll learn the PIC pin stuff by then.</h2></li></ul>
3,Motors,1,Brushed DC Motors,yes,DC Motor Questions,https://docs.google.com/presentation/d/1Gf3zokN5ibAf3_-ekW3uEfAcksxzaHalhG49MBLJEaw/edit?usp=sharing,BD-TJBw8AbI,"<ul><li>Gearhead brushed DC motors spin continuously when powered.</li><li>The electromagnet spins and brushes make connections to change the polarity of the electromagnet as it spins</li><li>PWM is used to control the speed of the motor, but no feedback is available (without external sensors)</li></ul>"
3,Motors,2,Stepper Motors,yes,Stepper Questions,https://docs.google.com/presentation/d/1Gf3zokN5ibAf3_-ekW3uEfAcksxzaHalhG49MBLJEaw/edit?usp=sharing,pXFzm3TZaHg,"<ul><li>Stepper motors take one step at a time then stop</li><li>More complex control is needed to make a stepper motor appear to spin continuously</li><li>Full relative position control, but less torque than a gearhead DC motor for similar prices.</li></ul>"
3,Motors,3,Servo Motors,yes,Servo Questions,https://docs.google.com/presentation/d/1Gf3zokN5ibAf3_-ekW3uEfAcksxzaHalhG49MBLJEaw/edit?usp=sharing,vjmiNwl0hFY,"<ul><li>Gearhead DC motor with a built in H-Bridge and feedback circuitry (cool)</li><li>Power, ground, and a signal line connected straight to the microcontroller</li><li>50 Hz signal (20mS between rising edges) where the high time sets the position anywhere from 0 to 180 (and everywhere in between)</li></ul>"
4,Intro to MPLABx,1,Downloading the tools,yes,Tools Questions,https://docs.google.com/presentation/d/1u_WP-FBdWKHZ4xtQieiGxGOODNkPe_QvRdkaZ2rzdDY/edit?usp=sharing,UZnU0lqpgyE,"<ul><li>Install the MPLABx program from <a href='http://www.microchip.com/mplabx/' target='_blank'>www.microchip.com/mplabx/</a></li><li>Install the MPLAB C18 Compiler from the <a href='http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&nodeId=1406&dDocName=en536656' target='_blank'>Academic MPLAB C18 Compiler</a> page<ul><li>Note: Must register with <b>.edu</b> email address to download the compiler</li></ul></li></ul>"
4,Intro to MPLABx,2,Hello World program,yes,Hello World Questions,https://docs.google.com/presentation/d/1u_WP-FBdWKHZ4xtQieiGxGOODNkPe_QvRdkaZ2rzdDY/edit?usp=sharing,yRDlk7ppoh4,"<ul><li>Programs start with the main function</li><li><b>printf</b> is a function that is made available by the <b>stdio</b> library (it's a standard C library)</li><li>On a real PIC printf uses serial communication (UART), but on the simulator it is just displayed to the screen</li><li>All our programs have a <b>setup</b> area for doing thing once and a <b>loop</b> area that loops forever</li></ul>"
4,Intro to MPLABx,3,Static LED program,yes,Static LED Questions,https://docs.google.com/presentation/d/1u_WP-FBdWKHZ4xtQieiGxGOODNkPe_QvRdkaZ2rzdDY/edit?usp=sharing,zXchkeHC8Jg,"<ul><li>The templates provide the boilerplate code that will either not change or change little between programs (saves a <b>TON</b> of typing)</li><li>MPLABx has a cool feature that makes it easy to use our templates</li><li>The 8 LEDs are on <b>PORTC</b> so setting that variable actually changes the electrical signal sent to the physical LEDs</li></ul>"
4,Intro to MPLABx,4,Using the Debugger,yes,Debugger Questions,https://docs.google.com/presentation/d/1u_WP-FBdWKHZ4xtQieiGxGOODNkPe_QvRdkaZ2rzdDY/edit?usp=sharing,McBZZsLaZlE,"<ul><li>We'll mainly use the PICkit3 as a debugger</li><li>The debugger is a tool that helps you figure out why a program isn't working as expected</li><li>Clicking the debug button does three things automagically<ul><li><b>Compiles</b> your human readable C code into machine language (1's and 0's) using the C18 compiler</li><li><b>Downloads</b> the machine code onto the PIC flash memory using a mechanism that can be debugged</li><li>Automatically presses the Play button to <b>start debugging</b></li></ul></li><li>Note, the debugger does not program the PIC for production.  It is just in a temporary development tool</li></ul>"
4,Intro to MPLABx,5,Using the Programmer,yes,Programmer Questions,https://docs.google.com/presentation/d/1u_WP-FBdWKHZ4xtQieiGxGOODNkPe_QvRdkaZ2rzdDY/edit?usp=sharing,DrP--4fcBN8,"<ul><li>The programmer is easy to use and is as easy as clicking a different button</li><li>A <b>programmer</b> is used when shipping products, not a debugger</li><li>The programmer can be handy when doing <b>lab checkoffs</b></li></ul>"
5,Intro to C,1,Variable scope,yes,Variable Scope Questions,https://docs.google.com/presentation/d/1AOYHmZkrjOMfNm2qzvQdM6BgaujYVFZuVmGQ8ViuXZo/edit?usp=sharing,zizgCyBUbno,"<ul><li>Comments can use // or /* ... */</li><li>Statements that begin with a <b>#</b> don't end with a semicolon<br>(They are <b>preprocessor directives</b>, not typical C language statements)</li><li>Variables can be <b>global</b> or <b>local</b> in scope</li></ul>"
5,Intro to C,2,If and Switch,yes,If and Switch Questions,https://docs.google.com/presentation/d/1AOYHmZkrjOMfNm2qzvQdM6BgaujYVFZuVmGQ8ViuXZo/edit?usp=sharing,j5EaFKxcYwU,"<ul><li>if statements use <b>==</b> not <b>=</b> in the condition statement</li><li>You can have multiple conditions in an <b>if</b></li><li><b>if, else if,</b> and <b>else</b> provide a lot of flexibility</li><li>The <b>switch</b> statement is similar to a series of <b>else if</b> statements</li></ul>"
5,Intro to C,3,Loops,yes,Loop Questions,https://docs.google.com/presentation/d/1AOYHmZkrjOMfNm2qzvQdM6BgaujYVFZuVmGQ8ViuXZo/edit?usp=sharing,XRYCF2m8sfA,"<ul><li><b>for</b> loops are handy when looping a fixed number of times.</li><li><b>while</b> loops can be very flexible, but we mainly just use the infinite <b>while</b> loop</li></ul>"
6,Number systems,1,Positive Binary,yes,Binary Questions,https://docs.google.com/presentation/d/1fasKhW-Jujraa2FQ0eaHtbRL2T5SIWVy2_CaaYKXLtc/edit?usp=sharing,C7rV4K6WqRQ,"<ul><li>The <b>rules</b> for a base 2 system work just like the <b>rules</b> for base 10 </li><li>Counting in binary 0b0000, 0b0001, 0b0010, 0b0011, 0b0100, ...</li></ul>"
6,Number systems,2,Positive Hex,yes,Hexadecimal Questions,https://docs.google.com/presentation/d/1fasKhW-Jujraa2FQ0eaHtbRL2T5SIWVy2_CaaYKXLtc/edit?usp=sharing,adwpz-1jo_M,"<ul><li>The <b>rules</b> for a base 16 system work just like the <b>rules</b> for base 10 or 2</li><li>Counting in hex 0x00, 0x01, ... 0x09, 0x0A, ... 0x0F, 0x10, ...</li></ul>"
6,Number systems,3,Negative Binary,yes,"2's Compliment Questions",https://docs.google.com/presentation/d/1fasKhW-Jujraa2FQ0eaHtbRL2T5SIWVy2_CaaYKXLtc/edit?usp=sharing,seEuNpqd3_0,"<ul><li>Negative numbers are stored in a mechanism that allows addition to work quickly</li><li>Counting down in binary 0b0000, 0b1111, 0b1110, 0b1101, 0b1100, ...</li></ul>"
6,Number systems,4,Negative Hex,yes,Negative Hex Questions,https://docs.google.com/presentation/d/1fasKhW-Jujraa2FQ0eaHtbRL2T5SIWVy2_CaaYKXLtc/edit?usp=sharing,cJeApRe_TxY,"<ul><li>Negative hex is just a shorter form of negative binary</li><li>When converting negative numbers to or from Hex go via binary</li><li>Counting down in hex 0x00, 0xFF, 0xFE, 0xFD, 0xFC, ...</li></ul>"
6,Number systems,5,Overflow,yes,Overflow Questions,https://docs.google.com/presentation/d/1fasKhW-Jujraa2FQ0eaHtbRL2T5SIWVy2_CaaYKXLtc/edit?usp=sharing,w2bQCRJZxjo,"<ul><li>Only <b>YOU</b> can prevent overflow issues.</li><li>If you understand how the system works you can better avoid the pitfalls.</li></ul>"
7,Variable types and operations,1,Integer Types,yes,Integer Type Questions,https://docs.google.com/presentation/d/1hvNW8FQaRUGpL8QbB-UpOTPn60H3KJD9KdXx6CjwQQw/edit?usp=sharing,evNSWY9UCqI,"<ul><li>Internally floats and ints are totally different 1.0 is not 1</li><li>char is 8 bits, int is 16 bits, long is 32 bits</li><li>Each integer range has limitations</li></ul>"
7,Variable types and operations,2,Floats,yes,Float Questions,https://docs.google.com/presentation/d/1hvNW8FQaRUGpL8QbB-UpOTPn60H3KJD9KdXx6CjwQQw/edit?usp=sharing,xhhKKGHj4aw,"<ul><li>Floats are <b>approximations</b></li><li>Approximations can cause little errors</li><li>Floats are slow (ie operations with floats take longer, like multiple milliseconds)</li></ul>"
7,Variable types and operations,3,Arrays and ASCII,yes,Array and ASCII Questions,https://docs.google.com/presentation/d/1hvNW8FQaRUGpL8QbB-UpOTPn60H3KJD9KdXx6CjwQQw/edit?usp=sharing,oEGJimUhyo4,"<ul><li>Arrays are chunks of repeated variable types accessed by index</li><li>Arrays can be int's, char's, long's, even an array of float's</li><li>Characters are stored using ASCII, which is similar to a number systems</li><li>Character arrays that end with the null character ( <b>\0</b> ) are considered strings.</li></ul>"
7,Variable types and operations,4,Casting to avoid integer operation errors,yes,Integer Error and Casting Questions,https://docs.google.com/presentation/d/1hvNW8FQaRUGpL8QbB-UpOTPn60H3KJD9KdXx6CjwQQw/edit?usp=sharing,WZNbIffUS3I,"<ul><li>Every single operation in an integer math statement needs to be stored as a char, int, or long</li><li>You have to watch out for integer error at each step, not just the final result</li></ul>"
7,Variable types and operations,5,More operators,yes,Operators Questions,https://docs.google.com/presentation/d/1hvNW8FQaRUGpL8QbB-UpOTPn60H3KJD9KdXx6CjwQQw/edit?usp=sharing,8Op8SFEJZXs,"<ul><li>There are a lot of fun operators. :)  Including a few shorthand ones += -=  ++ -- ...</li><li>The modulus operator % gets the remainder and is surprisingly useful.</li><li>Bitwise operators are often single character and process each bit individually (& | ~ ^)</li><li>Logical operators are often double characters and results in either 0 for <b>false</b> or 1 for <b>true</b> (&&  ||  !)</li><li>There are even more logical operators useful for if statements && || ! == != <  >  <=  >=</li></ul>"
8,Instruction cycles and SFRs,1,Special Function Registers,yes,SFR Questions,https://docs.google.com/presentation/d/1Ctd0ClEiWx-IFjouv9vq12gRkgTSbXqqxu_Y2PkqxAE/edit?usp=sharing,1Tfz1JfQjDI,"<ul><li>Even the best C programmer can't use a PIC unless they master SFRs</li><li>While similar to an unsigned char variable, an SFR is also read by the PIC to control pins and peripherals</li><li>Many of the library functions we'll use (later in the course) are just convenient ways to set SFRs</li></ul>"
8,Instruction cycles and SFRs,2,General Purpose IO,yes,GPIO Questions,https://docs.google.com/presentation/d/1Ctd0ClEiWx-IFjouv9vq12gRkgTSbXqqxu_Y2PkqxAE/edit?usp=sharing,Xdo-BZpFf7c,"<ul><li>GPIO deals with <b>digital</b> inputs and outputs</li><li><b>TRIS</b>x registers set a pin as an input (1) or output (0)</li><li><b>PORT</b>x registers set an output pin high (1) or low (0).</li><li>If a pin is an <b>input</b>, then the <b>PORT</b>x register is used to read the digital state of the pin. 2.5 volts (roughly) to 5 volts is high (1), 0 volts to 2.5 volts (roughly) is low (0)</li></ul>"
8,Instruction cycles and SFRs,3,Bits Syntax,yes,Bits Syntax Questions,https://docs.google.com/presentation/d/1Ctd0ClEiWx-IFjouv9vq12gRkgTSbXqqxu_Y2PkqxAE/edit?usp=sharing,6WoY_J78sbs,"<ul><li>The C18 compiler provides a <b>VERY</b> handy way to address the individual bits in an SFR</li><li>Every bit within an SFR has a special name (we'll teach you the ones you'll need to know)</li></ul>"
8,Instruction cycles and SFRs,4,Instruction Cycles,yes,Instruction Cycle Questions,https://docs.google.com/presentation/d/1Ctd0ClEiWx-IFjouv9vq12gRkgTSbXqqxu_Y2PkqxAE/edit?usp=sharing,ynD8dSJFZPg,"<ul><li>The clock frequency we use most often is 4 MHz because it makes math easy.</li><li>Since the instruction cycle frequency is <b>1/4th</b> the clock frequency, the PIC can process 1 million instructions per second (when the clock is 4 MHz).</li><li>There are 8 possible clock frequencies when using the internal oscillator</li></ul>"
8,Instruction cycles and SFRs,5,Delays,yes,Delay Questions,https://docs.google.com/presentation/d/1Ctd0ClEiWx-IFjouv9vq12gRkgTSbXqqxu_Y2PkqxAE/edit?usp=sharing,u0R9fFvZfZY,"<ul><li>There are 5 delay functions because you can only pass 0-255 as a parameter</li><li>Delay1TCY() has no parameter</li><li>Delay function calculations are very useful for labs and exams :)</li></ul>"
9,Functions and debugging,1,LCD Module,yes,LCD Questions,https://docs.google.com/presentation/d/1bjQ47V4jkj1EaLF95qAVKH1w6CN6hLqEFb0t81wQzjQ/edit?usp=sharing,2eT0iPqgfsc,"<ul><li>The LCD uses an API made by Microchip, modified for ME430, called <b>LCD Module</b></li><li>You need to include <b>LCD Module.h</b> and <b>LCD Module.c</b> in your project manually using quotes (it is not in the C18 library)</li><li>There are LCD functions to initialize, clear, set the cursor position, and write characters to the screen.</li></ul>"
9,Functions and debugging,2,Debugging: Variables,,,https://docs.google.com/presentation/d/1bjQ47V4jkj1EaLF95qAVKH1w6CN6hLqEFb0t81wQzjQ/edit?usp=sharing,aAaOnmyGVMY,"<ul><li>If you lose your <b>Variables</b> window open it via <i>Windows -> Debugging -> Variables</i></li><li>Some variables will be added automagically. However, you can always add a Watch to variables manually</li><li>You can create a Watch via drag-and-drop, typing the name, or clicking on the diamond with a green plus icon.</li><li><span style='color: red; font-size:14px;'>Variables only update when the program is <b>paused</b>.</span></li></ul>"
9,Functions and debugging,3,Debugging: Breakpoints,yes,Debugging Questions,https://docs.google.com/presentation/d/1bjQ47V4jkj1EaLF95qAVKH1w6CN6hLqEFb0t81wQzjQ/edit?usp=sharing,qwUKdf6kgBU,"<ul><li>Breakpoints provide a mechanism to pause the program at a particular line of code.</li><li>The Breakpoints window (<i>Windows -> Debugging -> Breakpoints</i>) lets you enable, disable, or delete breakpoints.</li><li>The 'run to cursor' breakpoint is very flexible and easy to use.</li><li>There is a limit on the number of hardware breakpoints you can use and they can only be added while stopped or paused.</li></ul>"
9,Functions and debugging,4,Writing Functions,yes,Function Questions,https://docs.google.com/presentation/d/1cuFvwy1WCXFJ2rdZjHs3d5fJmDTKInGYvTBWs1qEVJo/edit?usp=sharing,26DxfhGs-FE,"<ul><li>Functions can receive <b>many input parameters</b>, but have only <b>1 return</b> value.</li><li>Since we write our functions at the bottom of the .c file, we must create a prototype at the top to declare that a function exists.</li><li>If you use global variables they don't need to be passed or returned</li><li>For small projects (like our projects), global variables are often very effective and fine, but don't use all globals in big projects.</li></ul>"
9,Functions and debugging,5,Example Problem,,,https://docs.google.com/presentation/d/1cuFvwy1WCXFJ2rdZjHs3d5fJmDTKInGYvTBWs1qEVJo/edit?usp=sharing,on8T8cr4lvE,"<ul><li>The caret (^) symbol means XOR in C, not exponentiation.</li><li>We'll write a function to do integer exponentiation for practice.</li><li>5<span style='position: relative; top: -0.5em; font-size: 80%;'>0</span> = 1, 5<span style='position: relative; top: -0.5em; font-size: 80%;'>1</span> = 5, 5<span style='position: relative; top: -0.5em; font-size: 80%;'>2</span> = 25, 5<span style='position: relative; top: -0.5em; font-size: 80%;'>3</span> = 125, . . . </li></ul>"
9,Functions and debugging,6,Optional Topic: Supporting Modules,,,https://docs.google.com/presentation/d/1cuFvwy1WCXFJ2rdZjHs3d5fJmDTKInGYvTBWs1qEVJo/edit?usp=sharing,gwhEb6pFs4Q,"<ul><li>This topic is <span style='color: red; font-size:14px;'>optional</span>.  You will never be graded on your knowledge of this topic.  It is an optional extra bit of knowledge. :)</li><li>Large coding projects MUST be broken up in to more modular, decoupled pieces to have any chance of success.</li><li>C uses a combination of .c and .h files to encapsulate related code.  You've used modules, now it's time to write a few or at least show you the syntax.</li></ul>"
10,Timers,1,Timer on the LCD,yes,Timer Questions,https://docs.google.com/presentation/d/1RZiL2VkZxoJon-j-CWucsoXG4AVE26EsnwubNVzrWEE/edit?usp=sharing,6kCrPjjApxw,"<ul><li>The 18F4520 has four timers.  A Timer is an auto incrementing SFR (or pair of SFRs if timer is 16 bits)</li><li>We use three library functions with Timers: <b>OpenTimerX</b>, <b>ReadTimerX</b>, and <b>WriteTimerX</b></li><li><b>Timer0</b> is the most robust, <b>Timer2</b> will be used with PWM, <b>Timer1</b> & <b>Timer3</b> are available if you need more timers</li></ul>"
10,Timers,2,Timer Calculations,yes,Timer Calculation Questions,https://docs.google.com/presentation/d/1RZiL2VkZxoJon-j-CWucsoXG4AVE26EsnwubNVzrWEE/edit?usp=sharing,9aVY-XvMxdY,"<ul><li style='font-size: 18px;'>Right click on this link and select Save link as... <a href='http://www.rose-hulman.edu/class/me/HTML/ME430_Material_2_0/Public/Code/VideoLectureCode/timers_using_blocking_code.c'>timers_using_blocking_code.c</a></li><li style='font-size: 18px;'>Save the file into the TimerCalculations.X project folder</li><li>The instruction cycle frequency is <b>1/4th</b> the clock frequency.</li><li>The timer frequency is <b>1/(the selected prescaler)</b> of the instruction cycle frequency.</li><li>The time needed for 1 timer tick (ie the period) is 1 over the timer frequency (<b>period = 1/frequency</b> like always)</li><li>Then least shocking of all... <b>Time = Time per tick * number of ticks</b></ul>"
10,Timers,3,Timers with interrupts,yes,Timer Interrupt Questions,https://docs.google.com/presentation/d/1RZiL2VkZxoJon-j-CWucsoXG4AVE26EsnwubNVzrWEE/edit?usp=sharing,RpZ6CRzuL7o,"<ul><li style='font-size: 18px;'>Right click on this link and select Save link as... <a href='http://www.rose-hulman.edu/class/me/HTML/ME430_Material_2_0/Public/Code/InClassCode/timers_with_interrupts.c'>timers_with_interrupts.c</a></li><li style='font-size: 18px;'>Save the file into the TimersWithInterrupts.X project folder</li><li>Interrupts are <b>functions that get called by hardware</b> when certain events happen.</li><li>In this example the <b>high_isr</b> function is being called when the Timer does a rollover.</li><li>You will never call an interrupt service routine directly.  You will setup an interrupt to call that function when some event happens (timer overflows in this case).</li><li>There are <b>MANY</b> details to learn for interrupts (<b>next time</b>), today is just an introduction.</li></ul>"
11,Interrupts,1,Push Button Interrupts,yes,Push Button Questions,https://docs.google.com/presentation/d/1G-S7RISJGh-KqSJTOOpIYB_QgN6oC65j-y32zSAJo_M/edit?usp=sharing,Y7eL8BAvH48,"<ul><li>The interrupt service routines (ISR) can be called for many different events.</li><li>This time we'll use the falling edge of RB0, RB1, and RB2 to trigger an interrupt.</li><li>You can setup the push button interrupts using the <b>portb</b> library functions or you could set the SFRs directly.</li></ul>"
11,Interrupts,2,Interrupt Modes,yes,Interrupt Modes Questions,https://docs.google.com/presentation/d/1G-S7RISJGh-KqSJTOOpIYB_QgN6oC65j-y32zSAJo_M/edit?usp=sharing,zV2RRHeCakQ,"<ul><li>The <b>Compatibility</b> mode uses only the <b>high_isr</b>, The <b>Priority</b> mode uses the <b>high_isr</b> and <b>low_isr</b></li><li>RCONbits.IPEN lets you choose between <b>Compatibility</b> mode and <b>Priority</b> mode</li><li>If you want to use <b>low</b> priority interrupts <b>high</b> priority interrupts must be enabled as well.</li></ul>"
11,Interrupts,3,Debounce,yes,Debounce Questions,https://docs.google.com/presentation/d/1G-S7RISJGh-KqSJTOOpIYB_QgN6oC65j-y32zSAJo_M/edit?usp=sharing,AlI8MokJdF4,"<ul><li>All buttons bounce (some very little... others bounce a LOT).</li><li>A 'bounce' is an expected mechanical behavior when metal hits metal.  Unfortunately the making and breaking of metal contact can be seen by fast microcontrollers and they look just like multiple button presses. :(</li><li>There are electrical solutions to fix bouncing, but software solutions like these are <b>MUCH</b> more common.</li><li>Software debounce is done by waiting approximately 30 milliseconds before taking the 'real' button reading.</li><li>Long delays in ISR functions block any other ISR from happening (not always a problem but less elegant).</li><li>Long delays in the main while loop allow other ISRs to happen no problem (much better than delays in an ISR).</li></ul>"
11,Interrupts,4,Optional Non-Blocking Delays,,,https://docs.google.com/presentation/d/1G-S7RISJGh-KqSJTOOpIYB_QgN6oC65j-y32zSAJo_M/edit?usp=sharing,yuAA7B95J-U,"<ul><li>This topic is <span style='color: red; font-size:14px;'>optional</span>.  You will never be graded on your knowledge of this topic.  It is an optional extra bit of knowledge. :)</li><li>Blocking for 30 millisecond within the main while loop isn't a real problem, but it's easy to avoid.</li><li>You can make a non-blocking delay with a timer interrupt</li><li>By avoiding blocking code you free up 30,000 instructions that can be used to update the LCD faster. :)</li></ul>"
12,Using the ADC,1,Using the ADC,yes,Using the ADC Questions,https://docs.google.com/presentation/d/14x-EomTHd4ZDObBdSHVORLFb136kUlr6apguhLewdws/edit?usp=sharing,Lw-fhR-vmxo,"<ul><li>There are 13 pins that can be used as analog inputs</li><li>0 volts on an analog input is an ADC reading of 0</li><li>5 volts on an analog input is an ADC reading of 1023</li><li>Values between 0 and 5 volts give ADC readings between 0 and 1023 (simple linear interpolation)</li><li>Call OpenADC once (before the while loop) then use the block of 4 functions together whenever an ADC reading is needed.</li></ul>"
12,Using the ADC,2,Multiple ADCs,yes,Multiple ADC Questions,https://docs.google.com/presentation/d/14x-EomTHd4ZDObBdSHVORLFb136kUlr6apguhLewdws/edit?usp=sharing,BncCdHevPro,"<ul><li>When you call OpenADC you should set the portconfig parameter based on the number of analog inputs you need.  Use the <a href='http://www.rose-hulman.edu/class/me/HTML/ME430_Material_2_0/Public/Courseware/ADCON1.png' target='_blank'>ADCON1 table</a> to figure out the value to send.</li><li>The green board has two potentiometers connected to RA0 and RA1, then joystick potentiometers connected to RA2 and RA3</li><li>Using multiple ADC inputs is very easy.  You simply do one reading at a time.</li></ul>"
13,Light sensors,1,IR Circuits,yes, Questions,https://docs.google.com/presentation/d/1B0bkuRM48BW41nSHSJREOdxurd_9gFPEYa6rKGE0hfM/edit?usp=sharing,f-lddl2sf5k,"<ul><li>An IR circuit consists of an IR Emitter (an LED) and an IR Detector (a BJT)</li><li>Sizing a resistor for the IR Emitter is just like an LED, figure out the forward voltage drop, then use half the max continuous current spec</li><li>If the detector is being hit with IR light the signal will be <b>low</b>.</li><li>If the detector is in darkness the signal will be <b>high</b>.</li><li>The detector circuit is similar to a basic switch circuit in that the signal line is held high via a resistor then the sensor can bring the signal line low.</li></ul>"
13,Light sensors,2,Detector Resistor Sizing,yes,Detector Resistor Sizing Questions,https://docs.google.com/presentation/d/1B0bkuRM48BW41nSHSJREOdxurd_9gFPEYa6rKGE0hfM/edit?usp=sharing,JDRef3stoog,"<ul><li>The most common detector resistor sizes are in the ballpark of 1k to 10k, but minor environmental lighting changes make the idea resistor size vary.</li><li>Your first guess at the correct size should be based on the datasheet's dark collector current vs the ON current</li><li>If all signal readings are too <b>low</b> then your resistor is too big (even small currents yield large voltage deltas across the resistor).</li><li>If all signal readings are too <b>high</b> then your resistor is too small (even large currents can't yield large voltage deltas across the resistor).</li></ul>"
13,Light sensors,3,IR Packages and Wiring,yes,IR Packages and Wiring Questions,https://docs.google.com/presentation/d/1B0bkuRM48BW41nSHSJREOdxurd_9gFPEYa6rKGE0hfM/edit?usp=sharing,Ol1r3BzdE6w,"<ul><li>The IR break beam circuit and an IR reflective circuit use identical wiring patterns...</li><li>Ground the IR LED's Cathode. Size the IR LED resistor. Connect that resistor to the Anode and unregulated power.</li><li>Ground the IR detector's emitter pin.  Size the IR detector's resistor and connect to regulated 5 volts.  Additionally connect the detector's collector to the microcontroller.</li><li>IR modules can help extend the IR sensor range, but you must pulse the IR LED correctly.</li><li>There are some more advanced sensors like a Sharp IR distance sensor or an IR motion detector sensor. (Just Google them if you need to buy one for a project.)</li></ul>"
13,Light sensors,4,CdS Photocells,yes,CdS Protocell Questions,https://docs.google.com/presentation/d/1B0bkuRM48BW41nSHSJREOdxurd_9gFPEYa6rKGE0hfM/edit?usp=sharing,q7WsGPoqljw,"<ul><li>A CdS cell (also called a photocell, photoresistor, or Cadmium Sulfide cell) is just a resistor that changes value depending on the amount of light present on the surface.</li><li>A standard CdS cell might have a resistance value of 200k or larger when in darkness.</li><li>A standard CdS cell might have a resistance value of 10k when in light.</li><li>CdS cell can work with IR light, but really they are designed to work with visible light, such as the lights in the a room, the sun, or a laser pointer.</li></ul>"
14,Pulse Width Modulation,1,PWM Introduction,yes,PWM Introduction Questions,https://docs.google.com/presentation/d/1ASSmF-apwRDlHM9EkJUPkZpbf81YUpqtUJpAqHnEY90/edit?usp=sharing,5N3H0X_Swq0,"<ul><li>Pulse Width Modulation (PWM) is a perpheral used to generate square waves.</li><li>A square wave output needs a <b>frequency</b> and <b>duty cycle</b></li><li>There are two PWM pins on the PIC18F4520.  PWM1 is on RC2, PWM2 is on RC1 (no joke :) )</li><li>We'll use library functions to set the frequency (<b>OpenPWMx</b>) and duty cycle (<b>SetDCPWMx</b>)</li></ul>"
14,Pulse Width Modulation,2,PWM Frequency Calculations,yes,PWM Frequency Calculation Questions,https://docs.google.com/presentation/d/1ASSmF-apwRDlHM9EkJUPkZpbf81YUpqtUJpAqHnEY90/edit?usp=sharing,QBLxBHsjTyo,"<ul><li>OpenPWM receives a char (0-255) that is the number of timer ticks in a single cycle.</li><li>Frequency calculations can be done manually or with the magic PWM formula.</li><li>By far the fastest way to do an PWM frequency calculation is to create an Excel sheet that does all 24 possible combinations for you.  Make your own before exam 2. :)</li></ul>"
14,Pulse Width Modulation,3,PWM Applications,yes,PWM Application Questions,https://docs.google.com/presentation/d/1ASSmF-apwRDlHM9EkJUPkZpbf81YUpqtUJpAqHnEY90/edit?usp=sharing,_GNr53pwuXc,"<ul><li>The most common application for a PWM output is to control the speed of a DC motor.</li><li>In addition to motors, piezo buzzers and LEDs can use PWM outputs.</li><li>Servo motors could 'in theory' use a PWM output as well, but our PWM library has a few bugs which make the accuracy of the signal not work great for servos. :(</li></ul>"
14,Pulse Width Modulation,4,ADC + PWM Frequency Example,yes,ADC + PWM Questions,https://docs.google.com/presentation/d/1ASSmF-apwRDlHM9EkJUPkZpbf81YUpqtUJpAqHnEY90/edit?usp=sharing,y5DxpcwD6rs,"<ul><li>Whenever you change the frequency of the PWM signal you need to use the OpenPWM function, which sets the frequency.</li><li>In this video we'll review writing functions and doing integer math (good practice).</li></ul>"
15,UART Communication,1,UART Transmit,yes,UART Tx Questions,https://docs.google.com/presentation/d/1lAyW0CDwiJgKtvhEfzh5HUUR3A_FGxiozM7ULSPy4aI/edit?usp=sharing,py3HpisbJEY,"<ul><li>Most microcontrollers only use 3 communication protocols: SPI, I2C, & UART.  We'll study UART.</li><li>UART is nice because computers also use UART (which they call simply <b>Serial</b> communication)</li><li>The only UART library function we'll use is OpenUSART</li><li>To transmit data we'll use the <b>printf</b> command which magically knows to use the UART.</li></ul>"
15,UART Communication,2,UART Receive,yes,UART Rx Questions,https://docs.google.com/presentation/d/1lAyW0CDwiJgKtvhEfzh5HUUR3A_FGxiozM7ULSPy4aI/edit?usp=sharing,1yYauKg9q5c,"<ul><li>Serial data goes out RC6 (Tx) and serial data comes in RC7 (Rx)</li><li>If you connect a wire between them you can transmit to yourself (this has no practical value but good for this demo)</li><li>We'll receive data using the UART's <b>Rx interrupt</b>.</li><li>The <b>PIR1bits.RCIF</b> flag is special because you can't reset it until AFTER you have read the <b>RCREG</b> byte (a safety feature)</li></ul>"
15,UART Communication,3,How does the UART work?,yes,UART Questions,https://docs.google.com/presentation/d/1lAyW0CDwiJgKtvhEfzh5HUUR3A_FGxiozM7ULSPy4aI/edit?usp=sharing,FQpbIvhY7es,"<ul><li>Before data transmission begins the sender and the receiver must both know the baudrate (bits/second) being used.</li><li>Each UART message packet consist of 10 bits: Start bit (low), 8 bits of data (one byte, LSB first), and the Stop bit (high)</li><li>The 10 bits needed to send the data 0000 0011 would be: 0 1100 0000 1 (start, data lsb first, stop)</li><li>When no data is being sent the lines idle in the high state (which is why the LEDs are on)</li></ul>"
15,UART Communication,4,Optional topic: String communication,,,https://docs.google.com/presentation/d/1lAyW0CDwiJgKtvhEfzh5HUUR3A_FGxiozM7ULSPy4aI/edit?usp=sharing,K9MReNvYs8w,"<ul><li style='font-size: 18px;'>Right click on this link and select Save link as... <a href='http://www.rose-hulman.edu/class/me/HTML/ME430_Material_2_0/Public/Code/VideoLectureCode/StringCommunication.c'>StringCommunication.c</a></li><li>One very simple communication protocol is to speak English and just transmit ASCII Strings</li><li>This approach requires a message terminator (often \n which is the value 10)</li><li>This approach is simple and works super slick with MATLAB and other ASCII based computer programs</li><li>Often uber efficiency is often not as necessary as might think.</li></ul>"


